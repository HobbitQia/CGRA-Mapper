name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install LLVM and Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: 14
        platform: x64

    - name: Install LLVM tools (including llvm-symbolizer)
      run: |
        sudo apt-get update && sudo apt-get install -y llvm-14
        which llvm-symbolizer || echo "llvm-symbolizer not found"
        which clang-14 || echo "clang-14 not found"
  
    - name: Export llvm-symbolizer path
      run: echo "LLVM_SYMBOLIZER_PATH=/usr/lib/llvm-14/bin/llvm-symbolizer" >> $GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: mkdir build && cd build && cmake ..

    - name: Build
      working-directory: ${{github.workspace}}/build
      # Build your program with the given configuration
      run: make

    # Testing.
    - name: Test fusion via Nonlinear kernel
      working-directory: ${{github.workspace}}/tools/nonlinear
      run: |
        sh compile.sh
        sh run.sh
        sh verify.sh

    - name: Test split via Idiv kernel
      working-directory: ${{github.workspace}}/tools/idiv
      run: |
        sh compile.sh
        sh run.sh
        sh verify.sh

    - name: Test DVFS
      working-directory: ${{github.workspace}}/tools/dvfs
      run: |
        sh compile.sh
        sh run.sh
        sh verify.sh

    - name: Test inter edges
      working-directory: ${{github.workspace}}/tools/inter_edge
      run: |
        sh compile.sh
        sh run.sh
        sh verify.sh

    - name: Test expandable mapping
      working-directory: ${{github.workspace}}/tools/expandable
      run: |
        sh compile.sh
        sh run.sh
        sh verify.sh

